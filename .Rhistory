library(datasets)
data(iris)
head(data)
?iris
head(iris)
iris[Species== "virginica"]
iris[,,,,Species== "virginica"]
iris[iris$Species == "virginica"
)
iris[iris$Species == "virginica"]
head(iris)
iris$Species
iris$Species=="virginica"
iris(iris$Species=="virginica")
iris[iris$Species=="virginica"]
iris[,iris$Species=="virginica"]
iris[,,iris$Species=="virginica"]
myData <- iris[,,iris$Species=="virginica"]
head(myData)
mean(myData[,1])
nrows(myData)
nrow(myData)
mean(myData[,Sepal.Length])
mean(myData[,"Sepal.Length"])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
mean(myData[,"Sepal.width"])
mean(myData[,"Sepal.Width"])
library(datasets)
data(mtcars)
head(mtcars)
mtcars[cyl==4]
mtcars$cyl==4
mtcars[,mpg]
mtcars[,"mpg"]
mtcars[mtcars[cyl==4],"mpg"]
4cyl <- mtcars[cyl==4]
cyl4 <- mtcars[cyl==4]
mtcars$cyl==4
cyl4 <- mtcars$cyl==4
cyl4
mycars[cyl4]
mtcars[cyl4]
?subset
subset(mtcars,cyl==4,mpg)
mean(subset(mtcars,cyl==4,mpg))
(subset(mtcars,cyl==4,mpg))
?apply
apply((subset(mtcars,cyl==4,mpg)),2,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
head(mtcars)
tapply(mtcars$mpg,mtcars$hp,mean)
tapply(mtcars$mpg,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls()
exit()
2
ps)()
ps()
exit()
install.packages("quantmod")
library(quantmod)
as.Date
getQuotes.yahoo("IBM")
getQuote.yahoo("IBM")
getQuote("IBM")
getSymbols("IBM")
IBM
head(IBM)
stockList <- c("IBM", "GM", "AAPL")
getSymbols(stockList)
GM
IBM
head(IBM)
IBM.Adjusted
IBM[,IBM.Adjusted]
str(IBM)
getOptionChain("IBM")
IBM
opt <- getOptionChain("IBM")
str(opt)
head(opt)
tail(opt)
tail(opt)
opt[17,]
dim(opt)
opt <- getOptionChain("IBM", Exp=NULL)
tail(opt)
head(opt)
head(opt)
?
""
kfkf
sp500 <- new.env()
str(sp500)
library(quantmod)
library(tseries)
install.packages("tseries")
install.packages("timeDate")
symbols <- readfile("/Users/jim/Desktop/SP500",header=F,stringsAsFactors = F)
symbols <- read.csv("/Users/jim/Desktop/SP500",header=F,stringsAsFactors = F)
symbols <- read.csv("/Users/jim/Desktop/SP500.rtf",header=F,stringsAsFactors = F)
head(symbols)
symbols
str(sp500)
str(symbols)
symbols <- read.csv("/Users/jim/Desktop/SP500.csv",header=F,stringsAsFactors = F)
head(symbols)
symbols[,-2]
symbols <- symbols[,-2]
symbols
nrStocks = length(symbols)
nrStocks = length(symbols[,1])
nrStocks = length(symbols[1)
str(symbols)
dim(symbols)
str(symbols)
getSymbols(symbols)
env()
ls
ACE
AA
tail(AA)
A
A$AdustedA
head(A)
A$A.Adjusted
dailyReturns(A$A.Adjusted)
returns(A$A.Adjusted)
dailyReturn(A)
dailyReturn(A)
R.home()
install.packages("RMySQL", type='source')
install.packages("RMySQL", type='source')
install.packages("RMySQL", type='source')
Sys.getenv('MYSQL_HOME')
Sys.setenv('MYSQL_HOME'='/usr/local/mysql/bin')
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type='source')
R CMD INSTALL --configure-args='--with-mysql-dir=/usr/local/mysql/bin' RMySQL_*.tar.gz
echo "R.home()"
R.home()
Sys.getenv('DYLD_FALLBACK_LIBRARY_PATH')
library(RMySQL)
m <- dbDriver("MySQL")
con <- dbConnect(m, user="root", host="localhost")
con <- dbConnect(m, user="root", host="localhost", password="Xcal1ber")
rs <- dbSendQuery(con,"show databases")
rs
fetch(rs, n=100)
rs <- dbSendQuery(con, "select * from information_schema.STATISTICS limit 5;")
fetch(rs, n=100)
q()
library(RQuantLib)
install.packages("RQuantLib")
install.packages("RQuantLib")
library(RQuantLib)
install "RQuaantLib"
install.packages("RQuantLib")
install.packages("RQuantLib")
install.packages("RQuantLib")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
table(trainSpam$type)
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve +1) ~ trainSpam$type)
plot(log10(trainSpan[,1:4]+1))
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hCluster = hclust(dist(t(log10(trainSpam[,1:57]+1)))
)
plot(hCluster)
trainSpam$numType = as.numeric(trainSpam$type) -1
head(trainSpam$numType)
costFunction = function(x,y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55){}
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, familty = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
summary(cars)
install.packages("knitr")
clear()
getwd()
setwd("./repdata_PeerAssessment1")
getwd()
data <- read.csv(activity.csv)
data <- read.csv("activity.csv")
head(data)
tail(data)
subset(data, !is.na(steps))
max(subset(data, !is.na(steps)))
data.table(subset(data, !is.na(steps)))
library(data.table)
dt <- as.data.table(subset(data, !is.na(steps)))
dt
summary(dt)
hist(dt$steps)
str(dt)
dt[steps,by=date]
subset(dt$steps,by=date)
?setkey
setkey(dt,date)
tables
tables()
summary(dt)
summary(dt,by=date)
mean(dt$steps,by=date)
mean(dt,by=date)
mean(dt$steps,by=date)
dt[,mean(v),by=date]
dt[,mean(steps),by=date]
hist <- dt[,mean(steps),by=date]
hist(dt[,mean(steps),by=date])
head(hist)
hist(hist$V1)
hist(hist$V1,x=hist$date)
hist(hist$V1)
plot(dt$date,dt$steps,type=l)
plot(dt$date,dt$steps,type="l")
plot(dt$date,dt$interval,type="l")
plot(dt$interval,dt$steps,type="l")
plot(dt$interval,dt$steps,type="l",col="blue")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
summary(dt,by=date)
dt[,mean(steps),by=date]
hist <- dt[,mean(steps),by=date]
hist(dt[,mean(steps),by=date])
hist(hist$V1,x=hist$date)
plot(dt$interval,dt$steps,type="l")
plot(dt$interval,dt$steps,type="l",col="blue")
hist(dt$steps)
hist <- dt[,mean(steps),by=date]
hist(hist)
hist
hist(dt[,steps,by=date])
hist(dt[,sum(steps),by=date])
steps <- (dt[,sum(steps),by=date])
hist(steps)
str(steps)
hist(V1,date)
hist(sr$steos)
hist(sr$steps)
hist(dt$steps)
?hist
hist(sum(dt$steps, by=date))
sum(dt$steps, by=date)
(dt$steps, by=date)
dt[,sum(steps), by=date]
hist(dt[,sum(steps), by=date])
stepsByDay <- (dt[,sum(steps), by=date])
head(stepsByDay)
hist(stepsByDay$V1)
str(stepsByDay)
hist(stepsByDay$V1,xlab="Date")
hist(stepsByDay$date,xlab="Date")
steps <- tapply(dt$steps, dt$date, sum)
head(steps)
dt <- as.data.table(subset(data, !is.na(steps)))
head(dt)
steps <- tapply(dt$steps, dt$date, sum)
head(steps)
steps <- tapply(dt$steps, dt$date, sum, na.rm=TRUE)
step
steps
head(steps)
hist(steps)
hist(steps, ylim=range(0:30))
hist(steps, ylim=x(0:30))
hist(steps, ylim=range(0:30))
steps <- tapply(dt$steps, dt$date, sum)
hist(steps)
print(avgStepsPerDay <- mean(steps))
mean(steps)
mean(steps, na.rm=TRUE)
steps <- tapply(dt$steps, dt$date, sum, na.rm=TRUE)
mean(steps)
mean(steps.na.rm=TRUE)
mean(steps,.na.rm=TRUE)
mean(steps,na.rm=TRUE)
median(steps, na.rm=TRUE)
stepsInterval <- tapply(dt$steps, as.factory(dt$interval, mean)
)
stepsInterval <- tapply(dt$steps, as.factor(dt$interval, mean)
)
stepsInterval <- tapply(dt$steps, as.factor(dt$interval), mean)
stepsInterval
plot(levels(as.factor(dt.interval)), stepsInterval, type="l"
)
plot(levels(as.factor(dt$interval)), stepsInterval, type="l")
names(stepsInterval)[which(stepsInterval == max(stepsInterval))]
(stepsInterval)[which(stepsInterval == max(stepsInterval))]
(stepsInterval)[which(stepsInterval == max(stepsInterval)),1]
(stepsInterval)[1,which(stepsInterval == max(stepsInterval))]
(stepsInterval)[which(stepsInterval == max(stepsInterval))]
print(numNAs <- sum(is.na(data.steps)))
str(data)
print(numNAs <- sum(is.na(data$steps)))
data_noNA <- data
for (i in 1:length(data_noNA$steps)){
interval <- as.character(data.noNA$interval[i])
intervalMean <- steps[interval]
data_noNA$steps[i] <- intervalMean
} else{
}
}
data_noNA <<- data_noNA
for (i in 1:length(data_noNA$steps)){
interval <- as.character(data.noNA$interval[i])
intervalMean <- steps[interval]
data_noNA$steps[i] <- intervalMean
}
}
data_noNA <<- data_noNA
interval <- as.character(data.noNA$interval[i])
data.noNA <- data
interval <- as.character(data.noNA$interval[10])
interval
intervalMan < steps[interval]
intervalMean < steps[interval]
steps[interval]
interval <- as.character(data.noNA$interval[1000])
interval <- as.character(data.noNA$interval[100])
interval
intervalMean <- steps[interval]
intervalMean
steps
steps[1000]
steps[900]
steps[80]
steps
stepsInterval
stepsInterval[80]
And with this, course project 1 is concluded :-)
activity <- read.csv("activity.csv")
StepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm = T)
head(StepsPerDay)
hist(StepsPerDay, ylim = range(0:30), main = "Total number of steps per day", xlab = "Steps per day", ylab = "Frequency"")
hist(StepsPerDay, ylim = range(0:30), main = "Total number of steps per day", xlab = "Steps per day", ylab = "Frequency)
hist(StepsPerDay, ylim = range(0:30), main = "Total number of steps per day", xlab = "Steps per day", ylab = "Frequency")
hist(StepsPerDay, ylim = range(0:30), main = "Total number of steps per day", xlab = "Steps per day", ylab = "Frequency")
print(mean_StepsPerDay <- mean(StepsPerDay))
print(median_StepsPerDay <- median(StepsPerDay))
StepsPerInterval <- tapply(activity$steps, as.factor(activity$interval), mean, na.rm = T)
plot(levels(as.factor(activity$interval)), StepsPerInterval, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
names(StepsPerInterval)[which(StepsPerInterval == max(StepsPerInterval))]
print(NumberOfNAs <- sum(is.na(activity$steps)))
replaceNA <- function() {
activity_noNA <- activity
for (i in 1:length(activity_noNA$steps)) {
if (is.na(activity_noNA$steps[i])) {
interval <- as.character(activity_noNA$interval[i])
intervalmean <- StepsPerInterval[interval]
activity_noNA$steps[i] <- intervalmean
} else {
}
}
activity_noNA <<- activity_noNA
}
source("replaceNA.R")
source("replaceNA.R")
replaceNA()
## First calculate the new total number of steps
StepsPerDay_noNA <- tapply(activity_noNA$steps, activity_noNA$date, sum, na.rm = T)
## Set plotting space and fill with the two plots
par(mfcol = c(1, 2))
hist(StepsPerDay, ylim = range(0:40), main = "Total number of steps per day (with NA)", xlab = "Steps per day", ylab = "Frequency")
hist(StepsPerDay_noNA, ylim = range(0:40), main = "Total number of steps per day (NA's replaced)", xlab = "Steps per day", ylab = "Frequency")
print(paste("Mean:", (mean_StepsPerDay_noNA <- mean(StepsPerDay_noNA)), sep = " "))
print(paste("Median:", (median_StepsPerDay_noNA <- median(StepsPerDay_noNA)), sep = " "))
activity_noNA$date <- as.character(activity_noNA$date)
activity_noNA$date <- as.Date(activity_noNA$date)
weekdays <- (weekdays(activity_noNA$date))
activity_noNA$weekdays <- as.factor(weekdays)
levels(activity_noNA$weekdays) <- c("weekday", "weekday", "weekday", "weekday", "weekday","weekend", "weekend")
which_weekdays <- activity_noNA$weekdays == "weekday"  ## subset weekday rows
which_weekends <- activity_noNA$weekdays == "weekend"  ## subset weekend rows
## Calculating average number of steps per interval across weekdays and
## weekends
StepsPerInterval_weekday <- tapply(activity_noNA$steps[which_weekdays], as.factor(activity$interval[which_weekdays]),
mean, na.rm = T)
StepsPerInterval_weekday <- tapply(activity_noNA$steps[which_weekdays], as.factor(activity$interval[which_weekdays]),mean, na.rm = T)
StepsPerInterval_weekend <- tapply(activity_noNA$steps[which_weekends], as.factor(activity$interval[which_weekends]),mean, na.rm = T)
## Plot results in panel plot
par(mfcol = c(2, 1))
plot(levels(as.factor(activity_noNA$interval)), StepsPerInterval_weekday, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
plot(levels(as.factor(activity_noNA$interval)), StepsPerInterval_weekend, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
plot of chunk weekdays_difference_activity_patterns
#Reproducible Research: Peer Assessment 1
#Loading and preprocessing the data
#To start with, de archive activity.zip needs to be unzipped.
unzip("activity.zip")
#Then we're able to read the activity.csv file into R.
activity <- read.csv("activity.csv")
#What is the total number of steps taken per day?
StepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm = T)
hist(StepsPerDay, ylim = range(0:30), main = "Total number of steps per day", xlab = "Steps per day", ylab = "Frequency")
print(mean_StepsPerDay <- mean(StepsPerDay))
print(median_StepsPerDay <- median(StepsPerDay))
#What is the average daily activity pattern?
StepsPerInterval <- tapply(activity$steps, as.factor(activity$interval), mean, na.rm = T)
plot(levels(as.factor(activity$interval)), StepsPerInterval, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
#Which 5-minute interval (in format (h)hmm), on average across all the days in the dataset, contains the maximum number of steps? This is calculated as follows:
names(StepsPerInterval)[which(StepsPerInterval == max(StepsPerInterval))]
Inputting missing values
print(NumberOfNAs <- sum(is.na(activity$steps)))
source("replaceNA.R")
replaceNA()
## First calculate the new total number of steps
StepsPerDay_noNA <- tapply(activity_noNA$steps, activity_noNA$date, sum, na.rm = T)
## Set plotting space and fill with the two plots
par(mfcol = c(1, 2))
hist(StepsPerDay, ylim = range(0:40), main = "Total number of steps per day (with NA)", xlab = "Steps per day", ylab = "Frequency")
hist(StepsPerDay_noNA, ylim = range(0:40), main = "Total number of steps per day (NA's replaced)", xlab = "Steps per day", ylab = "Frequency")
print(paste("Mean:", (mean_StepsPerDay_noNA <- mean(StepsPerDay_noNA)), sep = " "))
print(paste("Median:", (median_StepsPerDay_noNA <- median(StepsPerDay_noNA)), sep = " "))
#Are there differences in activity patterns between weekdays and weekends?
activity_noNA$date <- as.character(activity_noNA$date)
activity_noNA$date <- as.Date(activity_noNA$date)
weekdays <- (weekdays(activity_noNA$date))
activity_noNA$weekdays <- as.factor(weekdays)
levels(activity_noNA$weekdays) <- c("weekday", "weekday", "weekday", "weekday", "weekday","weekend", "weekend")
which_weekdays <- activity_noNA$weekdays == "weekday"  ## subset weekday rows
which_weekends <- activity_noNA$weekdays == "weekend"  ## subset weekend rows
## Calculating average number of steps per interval across weekdays and
## weekends
StepsPerInterval_weekday <- tapply(activity_noNA$steps[which_weekdays], as.factor(activity$interval[which_weekdays]),mean, na.rm = T)
StepsPerInterval_weekend <- tapply(activity_noNA$steps[which_weekends], as.factor(activity$interval[which_weekends]),mean, na.rm = T)
## Plot results in panel plot
par(mfcol = c(2, 1))
plot(levels(as.factor(activity_noNA$interval)), StepsPerInterval_weekday, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
plot(levels(as.factor(activity_noNA$interval)), StepsPerInterval_weekend, type = "l", xlab = "5 Min interval (hhmm)", ylab = "Average number of steps", main = "Average number of steps per interval", ylim = range(0:250), xlim = range(0:2400))
